#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Encoding: UTF-8

import socket

from functions import *

from datetime import datetime

from libnmap.process import NmapProcess
from libnmap.parser import NmapParser, NmapParserException

from time import sleep

def scanIp(ip, verbose):
    openPorts = []
    startPort = int(config.get('attack','startPort'))
    endPort = int(config.get('attack','endPort'))
    
    # Print a nice banner with information on which host we are about to scan
    print "Scanning remote ip %s from port %s to %s..." %  (ip, startPort, endPort)

    # Check what time the scan started
    startTime = datetime.now()
    if verbose:
        print "--- Start time: %s" % startTime
        
    # Using the range function to specify ports (here it will scans all ports between 1 and 1024)
    # We also put in some error handling for catching errors
    try:
        for port in range(startPort, endPort):
            if verbose:
                print "--- Trying port %s" % port
            else:
                sys.stdout.write("%s " % port)
                sys.stdout.flush()
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex((ip, port))
            if result == 0:
                if verbose:
                    print "Port {}: \t Open".format(port)
                else:
                    print "\nPort {}: \t Open".format(port)
                openPorts.append(port)
            sock.close()
    except KeyboardInterrupt:
        print "*** You pressed Ctrl+C"
        sys.exit()
    except socket.gaierror:
        print '*** Hostname could not be resolved. Exiting'
        sys.exit()
    except socket.error:
        print "*** Couldn't connect to server"
        sys.exit()

    # Checking the time again
    endTime = datetime.now()
    if verbose:
        print "Finished time: %s" % endTime

    # Calculates the difference of time, to see how long it took to run the script
    totalTime =  endTime - startTime

    # Printing the information to screen
    print '\nScanning completed in: ', totalTime
    
    if openPorts:
        print "\nThese ports were open:"
        for openPort in openPorts:
            print openPort
    else:
        print "\nCould not find any open ports"
        
def nmapScan(targets, options, verbose):
    parsed = None
    nmproc = NmapProcess(targets, options)
    
    #rc = nmproc.run()
    rc = nmproc.run_background()
    
    #if rc != 0:
    #    print("nmap scan failed: {0}".format(nmproc.stderr))
    #print(type(nmproc.stdout))
    
    while nmproc.is_running():
        print("Nmap Scan running: ETC: {0} DONE: {1}%".format(nmproc.etc, nmproc.progress))
        sleep(2)

    print("rc: {0} output: {1}".format(nmproc.rc, nmproc.summary))

    try:
        nmap_report = NmapParser.parse(nmproc.stdout)
    except NmapParserException as e:
        print("Exception raised while parsing scan: {0}".format(e.msg))

    return nmap_report

def printScan(nmap_report, verbose):
    print("\nStarting Nmap {0} ( http://nmap.org ) at {1}".format(
        nmap_report.version,
        nmap_report.started))

    for host in nmap_report.hosts:
    
        
        if len(host.hostnames):
            tmp_host = host.hostnames.pop()
        else:
            tmp_host = host.address

        print("Nmap scan report for {0} ({1})".format(tmp_host,
                                                      host.address))
        print("\nHost is {0}.".format(host.status))
        print("\n  PORT     STATE         SERVICE      VERSION")

        for serv in host.services:
            pserv = "{0:>5s}/{1:3s}  {2:12s}  {3:10s}  {4}".format(str(serv.port),
                                                                 serv.protocol,
                                                                 serv.state,
                                                                 serv.service,
                                                                 serv.servicefp)
            if len(serv.banner):
                pserv += " ({0})".format(serv.banner)
            print(pserv)
        
    print("\n{}".format(nmap_report.summary))

def nmap(ip, verbose):
    startPort = int(config.get('attack','startPort'))
    endPort = int(config.get('attack','endPort'))
    
    report = nmapScan(ip, "-sV -p %s-%s" % (startPort, endPort), verbose)
    if report:
        printScan(report, verbose)
    else:
        print("No results returned")
        